{"version":3,"sources":["serviceWorker.ts","components/auth/Menu.tsx","components/Fetcher/config.ts","components/Fetcher/index.ts","components/redux/action_types/index.ts","components/redux/reducers/index.ts","components/redux/store/index.ts","components/Dashboard.tsx","components/redux/actions/index.ts","components/auth/Login.tsx","components/auth/SignUp.tsx","components/auth/Reset.tsx","components/dashboard/universal_templates.tsx","components/dashboard/preloader.tsx","components/dashboard/headers/headers.tsx","components/dashboard/projects/modal/edit_component.tsx","components/dashboard/projects/modal/add_component.tsx","components/dashboard/projects/modal/modal_menu.tsx","components/dashboard/projects/table.tsx","components/dashboard/projects/projects.tsx","components/dashboard/messager/users/users_list.tsx","components/dashboard/messager/messages/input_component.tsx","components/dashboard/messager/messages/messages.tsx","components/dashboard/messager/current_user/current_user.tsx","components/dashboard/messager/messager.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","HomePages","FetchConfig","Fetcher","mode","path","axios","method","url","headers","this","token","data","JSON","stringify","params","ActionType","MenuAuth","props","LOGIN","className","to","SIGNUP","RESET","Component","initialState","dashboard_page","rootReducer","state","action","type","ADD","Object","assign","concat","payload","CHANGE_DASHBOARD_PAGE","store","createStore","subscribe","console","log","getState","Pages","Add","dispatch","Login","email","password","isAuth","handleSubmit","bind","handleChange","document","title","event","preventDefault","fetcher","post","then","response","status","setState","Action","add","redirect","localStorage","setItem","_id","catch","error","alert","target","name","value","icon","faUserCircle","size","color","onSubmit","placeholder","onChange","autoComplete","SignUp","confirmationPassword","Header","base_class","faPlus","faSearch","faBell","src","alt","faChevronDown","SideBar","Actions","change_dashboard_page","page","PROJECTS","key","MESSAGES","STATISTICS","HOME","USERS","onClick","changeDashboardState","menu","faHome","faBars","faChartLine","faEnvelope","faUserFriends","id","map","index","list_item","Preloader","faSpinner","ProjectsHeader","amount","MessagesHeader","inbox","defaultValue","EditModalWindow","open","onOpenModal","onCloseModal","editRequest","put","faEdit","onClose","center","AddModalWindow","ModalMenu","removeElement","delete","faTimes","HoverMenu","onHover","hover","onLeave","onMouseLeave","onMouseEnter","faEllipsisV","Table","field","sort","a","b","toLowerCase","cost","deadline","timeSpent","progress","row_class","main_color","secondary_color","company","Date","getDate","humanityMonthName","getMonth","getFullYear","moment","updated_at","fromNow","generateProgress","typy","assigned","safeObject","month_number","filter","max","table_field","ProjectComponent","get_projects_data","projectsAmount","table","get","keys","length","UsersList","get_threads_messages","get_users_server_data","users","users_amount","thread","thread_amount","users_response","thread_messages_response","created_at","body","user_field","SendMessage","getItem","message","getId","faAngleDoubleRight","Messages","get_server_data","responce","array","direction_class","CurrentUser","position","phone","organization","address","description","get_current_user","current_user_response","generateArticle","Messager","get_thread_server_data","current_user","thread_response","Dashboard","render","Content","redirectToHome","ReactDOM","exact","component","Reset","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23f27dd0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport { AuthState } from './Login';\nimport {\n    Link\n  } from \"react-router-dom\";\n\n\nexport enum HomePages {\n    \"LOGIN\" = \"login\",\n    \"SIGNUP\" = \"signup\",\n    \"RESET\" = \"reset\"\n}\n\ntype AuthProps = {\n    mode: HomePages\n}\n\nexport default class MenuAuth extends Component <AuthProps, AuthState> {\n    // construchrefr(props:any){\n    //     super(props);\n    // }\n\n    render(){\n        switch(this.props.mode){\n            case HomePages.LOGIN:\n                return (\n                    <div className=\"link__wrapper\">\n                        <Link to = \"/signup\" className = \"link_orange\">Sign Up</Link>\n                        <Link to = \"/reset\" className=\"link_orange\">Reset password</Link>\n                    </div>\n                )\n            case HomePages.SIGNUP:\n                return (\n                    <div className=\"link__wrapper\">\n                        <Link to = \"/\" className = \"link_orange\">Login</Link>\n                        <Link to = \"/reset\" className = \"link_orange\">Reset password</Link>\n                    </div>\n                )\n            case HomePages.RESET:\n                return (\n                    <div className=\"link__wrapper\">\n                        <Link to = \"/\" className = \"link_orange\">Login</Link>\n                        <Link to = \"/signup\" className = \"link_orange\">Reset password</Link>\n                    </div>\n            )\n        }\n    }\n\n}","export const FetchConfig: {\n    host: string,\n    port: number,\n    domain: string,\n    key: string,\n    interval: number\n} = {\n    host: \"localhost\",\n    port: 3000,\n    domain: \"geekhub-frontend-js-9.herokuapp.com\",\n    key: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZTE5YzIyM2E0MTk5YzAwMjI3NTI2OGEiLCJpYXQiOjE1Nzk2ODc4OTl9.M5q83O_nP6B8SbfNKOs3CaQTu4JaQcbr_MgDLSgqnTU\",\n    interval: 5000\n}","import axios from 'axios';\nimport {FetchConfig} from './config';\n\nexport default class Fetcher{\n    token(mode: string):any{\n        switch(mode){\n            case \"auth\":\n                return {\n                    \"Content-Type\": \"application/json\",\n                    \"x-auth-token\": FetchConfig.key\n                }\n            case \"access\":\n                return {\n                    \"Content-Type\": \"application/json\",\n                    \"x-access-token\": FetchConfig.key\n                }\n            case 'no_token': {\n                return {\n                    \"Content-Type\": \"application/json\",\n                    \"x-auth-token\": null\n                }\n            }\n            case 'none':\n                return {\n                    \"Content-Type\": \"application/json\"\n                }\n        }\n    }\n    get(path: string, mode: string){\n        return axios({\n            method: 'GET',\n            url: `https://${FetchConfig.domain}/${path}`,\n            headers: this.token(mode)\n        })\n    }\n    post(path: string, mode: string, data: any){\n        return axios({\n            url: `https://${FetchConfig.domain}/${path}`,\n            method: 'POST',\n            headers: this.token(mode),\n            data: JSON.stringify(data)\n        })\n    }\n    delete(path: string, mode: string, params?: any){\n        return axios({\n            url: `https://${FetchConfig.domain}/${path}`,\n            method: 'DELETE'\n        })\n    }\n    put(path: string, mode: string, params: any){\n        return axios({\n            url: `https://${FetchConfig.domain}/${path}`,\n            headers: this.token(mode),\n            data: JSON.stringify(params)\n        })\n    }\n}","export enum ActionType {\n    ADD = \"ADD\",\n    CHANGE_DASHBOARD_PAGE = \"CHANGE_DASHBOARD_PAGE\"\n}","import { ActionType } from '../action_types/index';\nimport { actionTypeSchema } from '../actions/index';\n\ntype initialStateType = {\n    data: Array<object>,\n    dashboard_page: Array<object>\n}\n\nconst initialState:initialStateType = {\n    data: [],\n    dashboard_page: []\n}\n\nfunction rootReducer(state:initialStateType = initialState, action:actionTypeSchema){\n    if(action.type === ActionType.ADD){\n        return Object.assign({}, state, {\n            data: state.data.concat(action.payload)\n        })\n    }\n    if(action.type === ActionType.CHANGE_DASHBOARD_PAGE){\n        return Object.assign({}, state, {\n            dashboard_page: state.dashboard_page.concat(action.payload)\n        })\n    }\n    return state;\n}\n\nexport default rootReducer;","import  { createStore } from 'redux';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(rootReducer);\nstore.subscribe(() => {\n    console.log('subscribe', store.getState());\n})\n\nexport default store;\n","import React, { Component } from 'react';\n\nimport {Header, SideBar} from './dashboard/universal_templates';\nimport Project from './dashboard/projects/projects';\nimport Messager from './dashboard/messager/messager';\nimport { Redirect } from 'react-router-dom';\n\nexport enum Pages {\n    \"PROJECTS\" = \"projects\",\n    \"MESSAGES\" = \"messages\",\n    \"HOME\" = \"home\",\n    \"STATISTICS\" = \"statistics\",\n    \"USERS\" = \"users\"\n}\nexport type DashboardState = {\n    page: Pages\n}\n\nexport default class Dashboard extends Component <{}, DashboardState> {\n    constructor(props: object){\n        super(props);\n        \n        localStorage.setItem(\"dashboard_page\", Pages.PROJECTS)\n\n        this.state = {\n            page: Pages.MESSAGES\n        }\n    }\n\n    componentWillUpdate(){\n        this.render();\n    }\n    \n    redirectToHome(){\n        return <Redirect to = \"/\"/>\n    }\n\n    Content(){\n        switch(this.state.page){\n            case Pages.MESSAGES:\n                return [\n                    <Header/>,\n                    <div className=\"main_content__wrapper\">\n                        <SideBar/>\n                        <main className = \"main_content\">\n                            <Messager key = { Pages.MESSAGES }/>\n                        </main>\n                    </div>\n                ]\n            case Pages.PROJECTS:\n                return [\n                    <Header/>,\n                    <div className=\"main_content__wrapper\">\n                        <SideBar/>\n                        <main className = \"main_content\">\n                            <Project key = { Pages.PROJECTS }/>\n                        </main>\n                    </div>\n                ]\n        }\n    }\n\n    render(){\n        let user_id = localStorage.getItem(\"user_id\");\n        if(!user_id){\n            return this.redirectToHome();\n        }else{\n            return this.Content();\n        }\n    }\n}","import { ActionType } from '../action_types/index';\nimport store from '../store/index';\n\nexport type actionTypeSchema = {\n    type: ActionType,\n    payload: object\n}\n\nexport default class Add{\n    add(payload:object): actionTypeSchema{\n        store.dispatch({\n            type: ActionType.ADD,\n            payload: payload\n        })\n        return {\n            type: ActionType.ADD,\n            payload\n        }\n    }\n    clear(){\n        store.getState().data = []\n    }\n    change_dashboard_page(payload:object):actionTypeSchema{\n        store.dispatch({\n            type: ActionType.CHANGE_DASHBOARD_PAGE,\n            payload: payload\n        })\n        return {\n            type: ActionType.CHANGE_DASHBOARD_PAGE,\n            payload\n        }\n    }\n}","import React , {Component} from \"react\";\nimport fetcher from \"../Fetcher/index\";\nimport { FetchConfig } from \"../Fetcher/config\";\nimport Menu, { HomePages } from './Menu';\nimport Action from '../redux/actions';\n\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faUserCircle} from \"@fortawesome/free-solid-svg-icons\";\n\nimport {\n    Redirect\n  } from \"react-router-dom\";\n\ntype LoginStateItem = {\n    email: string,\n    password: string,\n    isAuth: boolean\n}\n\nexport type AuthState = {\n    isAuthorized: boolean\n}\n\nexport default class Login extends Component<{}, LoginStateItem> {\n    constructor(props:any){\n        super(props);\n\n        this.state = {\n            email: \"\",\n            password: \"\",\n            isAuth: false\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n\n        document.title = \"Login\"\n    }\n    \n    redirect(){\n        if(this.state.isAuth === true){\n            return (\n                <Redirect to = \"/dashboard\"/>\n            )\n        }\n    }\n\n    handleSubmit(event: React.FormEvent){\n        event.preventDefault();\n        let {email, password} = this.state;\n        const Fetcher = new fetcher();\n        Fetcher.post(`api/users/login`, \"none\", {\n            email: email,\n            password: password\n        }).then(response => {\n            if(response.status > 199 && response.status < 400){\n                this.setState({\n                    isAuth: true\n                })\n                new Action().add({\n                    token: FetchConfig.key\n                })\n                this.redirect();\n                localStorage.setItem(\"user_id\", response.data._id);\n            }\n        })\n        .catch(error => {\n            alert(error)\n        })\n    }\n    handleChange(event: { target: HTMLInputElement }){\n        switch(event.target.name){\n            case \"password\": {\n                this.setState({\n                    password: event.target.value\n                })\n                break;\n            }\n            case \"email\": {\n                this.setState({\n                    email: event.target.value\n                })\n                break;\n            }\n        }\n    }\n    render(){\n        if(this.state.isAuth) {\n            return this.redirect();\n        };\n        return (\n            <div className=\"form form__auth block__centered\">\n                <div className=\"form__image\">\n                    <FontAwesomeIcon\n                        icon={faUserCircle}\n                        size=\"7x\"\n                        color=\"gold\"\n                    />\n                </div>\n                <form onSubmit={this.handleSubmit}>\n                    <input \n                        className=\"input__element input__group\"\n                        type=\"email\" \n                        name=\"email\" \n                        value={this.state.email}\n                        placeholder=\"Email\"\n                        onChange={this.handleChange}\n                    />\n                    <input \n                        className=\"input__element input__group\"\n                        type=\"password\" \n                        name=\"password\" \n                        value={this.state.password}\n                        placeholder=\"Password\"\n                        onChange={this.handleChange}\n                        autoComplete=\"password\"\n                    />\n                    <button \n                        className=\"form__button\"\n                        type=\"submit\">\n                        Log in\n                    </button>\n                </form>\n                <Menu mode = {HomePages.LOGIN}/>\n            </div>\n        )\n    }\n}","import React , {Component} from \"react\";\nimport fetcher from \"../Fetcher/index\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faUserCircle} from \"@fortawesome/free-solid-svg-icons\";\nimport Menu, { HomePages } from './Menu';\n\ninterface SignUpStateItem {\n    email: string,\n    password: string,\n    name: string\n}\n\nexport default class SignUp extends Component<{}, SignUpStateItem> {\n    constructor(props:any){\n        super(props);\n\n        this.state = {\n            email: \"\",\n            password: \"\",\n            name: \"\"\n        }\n\n        document.title = \"Sign Up\"\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleSubmit(event: React.FormEvent){\n        event.preventDefault();\n        let {email, password} = this.state;\n        const Fetcher = new fetcher();\n        Fetcher.post(`api/users`, \"auth\", {\n            email: email,\n            password: password\n        }).then(response => {\n            console.log(response)\n            if(response.status > 199 && response.status < 400){\n                // this.props.handleSuccessfulAdmin(response.data);\n            }\n        })\n        .catch(error => {\n            console.log(\"login error\", error)\n        })\n        \n    }\n    handleChange(event: { target: HTMLInputElement }){\n        switch(event.target.name){\n            case \"password\": {\n                this.setState({\n                    password: event.target.value\n                })\n                break;\n            }\n            case \"email\": {\n                this.setState({\n                    email: event.target.value\n                })\n                break;\n            }\n            case \"name\": {\n                this.setState({\n                    name: event.target.value\n                })\n                break;\n            }\n        }\n    }\n    render(){\n        return (\n            <div className=\"form form__auth block__centered\">\n                <div className=\"form__image\">\n                    <FontAwesomeIcon\n                        icon={faUserCircle}\n                        size=\"7x\"\n                        color=\"gold\"\n                    />\n                </div>\n                <form onSubmit={this.handleSubmit}>\n                    <input \n                        className=\"input__element input__group\"\n                        type=\"text\" \n                        name=\"name\"\n                        placeholder=\"Name\"\n                        value={this.state.name}\n                        onChange={this.handleChange}\n                    />\n                    <input \n                        className=\"input__element input__group\"\n                        type=\"email\" \n                        name=\"email\" \n                        value={this.state.email}\n                        placeholder=\"Email\"\n                        onChange={this.handleChange}\n                    />\n                    <input \n                        className=\"input__element input__group\"\n                        type=\"password\" \n                        name=\"password\" \n                        value={this.state.password}\n                        placeholder=\"Password\"\n                        onChange={this.handleChange}\n                        autoComplete=\"password\"\n                    />\n                    <button \n                        className=\"form__button\"\n                        type=\"submit\">\n                        Sign Up\n                    </button>\n                </form>\n                <Menu mode = { HomePages.SIGNUP } />\n            </div>\n        )\n    }\n}","import React , {Component} from \"react\";\nimport fetcher from \"../Fetcher/index\";\nimport Menu, { HomePages } from './Menu';\n\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faUserCircle} from \"@fortawesome/free-solid-svg-icons\";\n\ninterface LoginStateItem {\n    email: string,\n    password: string,\n    confirmationPassword: string\n}\n\nexport default class Login extends Component<{}, LoginStateItem> {\n    constructor(props:any){\n        super(props);\n\n        this.state = {\n            email: \"\",\n            password: \"\",\n            confirmationPassword: \"\"\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleSubmit(event: React.FormEvent){\n        event.preventDefault();\n        let {email, password} = this.state;\n        const Fetcher = new fetcher();\n        Fetcher.post(`api/users`, \"auth\", {\n            email: email,\n            password: password\n        }).then(response => {\n            console.log(response)\n            if(response.status > 199 && response.status < 400){\n                // this.props.handleSuccessfulAdmin(response.data);\n            }\n        })\n        .catch(error => {\n            console.log(\"login error\", error)\n        })\n        \n    }\n    handleChange(event: { target: HTMLInputElement }){\n        switch(event.target.name){\n            case \"password\": {\n                this.setState({\n                    password: event.target.value\n                })\n                break;\n            }\n            case \"email\": {\n                this.setState({\n                    email: event.target.value\n                })\n                break;\n            }\n            case \"confirmationPassword\": {\n                this.setState({\n                    confirmationPassword: event.target.value\n                })\n                break;\n            }\n        }\n    }\n    render(){\n        return (\n            <div className=\"form form__auth block__centered\">\n\n                <div className=\"form__image\">\n                    <FontAwesomeIcon\n                        icon={faUserCircle}\n                        size=\"7x\"\n                        color=\"gold\"\n                    />\n                </div>\n                <form onSubmit={this.handleSubmit}>\n                    <input \n                        className=\"input__element input__group\"\n                        type=\"email\" \n                        name=\"email\" \n                        value={this.state.email}\n                        placeholder=\"Email\"\n                        onChange={this.handleChange}\n                    />\n                    <input \n                        className=\"input__element input__group\"\n                        type=\"password\" \n                        name=\"confirmationPassword\"\n                        placeholder=\"Name\"\n                        autoComplete = \"\"\n                        value={this.state.confirmationPassword}\n                        onChange={this.handleChange}\n                    />\n                    <input \n                        className=\"input__element input__group\"\n                        type=\"password\" \n                        name=\"password\" \n                        value={this.state.password}\n                        placeholder=\"Password\"\n                        onChange={this.handleChange}\n                        autoComplete=\"password\"\n                    />\n                    <button \n                        className=\"form__button\"\n                        type=\"submit\">\n                        Reset\n                    </button>\n                </form>\n                <Menu mode = {HomePages.RESET}/>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSearch, faBell, faChevronDown, faPlus, faHome, faBars, faChartLine, faEnvelope, faUserFriends} from \"@fortawesome/free-solid-svg-icons\";\nimport Actions from '../redux/actions';\nimport { Pages, DashboardState } from '../Dashboard';\n\n// Dashboard header\nexport class Header extends Component{\n\n    render(){\n        const base_class:string = \"bar-top__user_bar__item\";\n        return (\n            <header className = \"bar-top\">\n                <div className = \"bar-top__logo\">virtus</div>\n                <button className=\"bar-top__menu_toggler\">Menu</button>\n                <div className=\"bar-top__user_bar\">\n                    <span className={base_class + \" bar-top__user_bar__add_block\"}>\n                        <span>Add</span>\n                        <FontAwesomeIcon\n                            icon = {faPlus}\n                            className = {base_class}\n                        />\n                    </span>\n                    <FontAwesomeIcon\n                        icon = {faSearch}\n                        className = {base_class}\n                    />\n                    <FontAwesomeIcon\n                        icon = {faBell}\n                        className = {base_class}\n                    />\n                    <span className = {base_class}>\n                        <img src=\"https://s.yimg.com/ny/api/res/1.2/wtzeNGYJlWn1YCuOXKy3DQ--~A/YXBwaWQ9aGlnaGxhbmRlcjtzbT0xO3c9ODAw/http://media.zenfs.com/en/homerun/feed_manager_auto_publish_494/69212554e5b1b94435cb5d1f9f0d2fbd\" alt=\"user avatar\" className=\"bar-top__user_bar__avatar\"/>\n                        <FontAwesomeIcon\n                            icon = {faChevronDown}\n                            className = {base_class}\n                        />\n                    </span>\n                </div>\n            </header>\n        )\n    }\n}\n\n// Dashboard side nav-menu\nexport class SideBar extends Component<{}, DashboardState> {\n\n    constructor(props:any){\n        super(props);\n\n        new Actions().change_dashboard_page({\n            page: Pages.PROJECTS\n        })\n\n        this.state = {\n            page: Pages.PROJECTS\n        }\n\n        localStorage.setItem(\"dashboard_page\", Pages.PROJECTS);\n    }\n\n    convertStringToPages(key:string){\n        switch(key){\n            case \"projects\":\n                return Pages.PROJECTS\n            case \"messages\":\n                return Pages.MESSAGES\n            case \"statistics\":\n                return Pages.STATISTICS\n            case \"home\":\n                return Pages.HOME\n            case \"users\":\n                return Pages.USERS\n        }\n    }\n\n    changeDashboardState(page: Pages){\n        console.log(this.state.page)\n        switch(page){\n            case Pages.PROJECTS:\n                this.setState({\n                    page: Pages.PROJECTS\n                })\n                break;\n            case Pages.MESSAGES:\n                this.setState({\n                    page: Pages.MESSAGES\n                })\n                break;\n            default:\n                this.setState({\n                    page: Pages.PROJECTS\n                })\n                break;\n        }\n        localStorage[\"dashboard_page\"] = this.state.page;\n    }\n\n    list_item(icon:any, page:Pages){\n        return (\n            <li className = \"bar-side__item\" key =  { page } >\n                <FontAwesomeIcon\n                    icon = { icon }\n                    onClick = { () => {\n                        this.changeDashboardState( page );\n                    }}\n                />\n            </li> \n        )\n    }\n    render(){\n        let menu:Array<any> = [faHome, faBars, faChartLine, faEnvelope, faUserFriends];\n        let id:any[] = [Pages.HOME, Pages.PROJECTS, , Pages.STATISTICS, Pages.MESSAGES, Pages.USERS];\n        return (\n            <aside className=\"bar-side\">\n                <ul className=\"bar-side__list_wrapper\">\n                    {\n                        menu.map((value,index) => {\n                           return this.list_item(value, id[index]);\n                        })\n                    }\n                </ul>\n            </aside>\n        )\n    }\n}","import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSpinner} from \"@fortawesome/free-solid-svg-icons\";\nimport React, { Component } from \"react\";\n\nexport default class Preloader extends Component {\n    render(){\n        return (\n            <div className = \"loader loader_centered loader_animated\">\n                <FontAwesomeIcon\n                    icon = {faSpinner}\n                    className = \"loader_icon \"   \n                />\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport { ProjectType, MessageType } from './types';\n// import store from '../redux/store';\n\nexport class ProjectsHeader extends Component <ProjectType, ProjectType> {\n    constructor(props:any){\n        super(props);\n        this.state = {\n            amount: this.props.amount\n        }\n    }\n\n    render(){\n        return (\n            <header className=\"main_content__header\">\n                <div className=\"main_content__group\">\n                    <span className=\"main_content__group__item\">All Projects ({this.state.amount})</span>\n                    <span className=\"main_content__group__item\">Workflow</span>\n                </div>\n                <div className=\"main_content__group\">\n                    <span className=\"main_content__group__item main_content__group__item-white\">Show projects:</span>\n                    <select name=\"projects\" id=\"projects\" className=\"main_content__header__select\">\n                        <option value=\"all\" className=\"main_content__messages__header__option\">All</option>\n                    </select>\n                </div>\n            </header>\n        )\n    }\n}\n\nexport class MessagesHeader extends Component <MessageType<number>, MessageType<number>> {\n    constructor(props: MessageType<number>){\n        super(props);\n        this.state = {\n            inbox: this.props.inbox\n        }\n    }\n    render(){\n        return (\n            <header className=\"main_content__header\">\n            <div className=\"main_content__group\">\n                <span className=\"main_content__group__item\">\n                    <i className=\"main_content__header__icon fas fa-inbox\"></i>\n                    <i>Inbox({this.state.inbox})</i>\n                </span>\n                <span className=\"main_content__group__item\">\n                    <i className=\"main_content__header__icon fab fa-telegram-plane\"></i>\n                    <i>Sent</i>\n                </span>\n                <span className=\"main_content__group__item\">\n                    <i className=\"main_content__header__icon fas fa-trash\"></i>\n                    <i>Trash</i>\n                </span>\n            </div>\n            <div className=\"main_content__group\">\n                <span className=\"main_content__group__item main_content__group__item-white\">Show projects:</span>\n                <select className=\"main_content__header__select\">\n                    <option value=\"all\" defaultValue=\"all\" className=\"main_content__messages__header__option\">All</option>\n                </select>\n            </div>\n        </header>\n        )\n    }\n}","import React, {Component} from 'react';\nimport Modal from 'react-responsive-modal';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEdit} from \"@fortawesome/free-solid-svg-icons\";\n// \nimport Fetcher from '../../../Fetcher/index';\nimport {FetchConfig} from '../../../Fetcher/config';\n\nexport default class EditModalWindow extends Component {\n    state = {\n      open: false\n    }\n\n    onOpenModal = () => {\n      this.setState({ open: true });\n    };\n     \n    onCloseModal = () => {\n      this.setState({ open: false });\n    };\n\n    editRequest = (id: string, data: any) => {\n      new Fetcher().put(`https://${FetchConfig.domain}/api/project/${id}`, 'no_token', data)\n    }     \n    render() {\n      const { open } = this.state;\n      return (\n        <div className = \"modal-window\">\n          <FontAwesomeIcon\n            icon = { faEdit }\n              className = \"table__color_main_success table__icon __close_btn\"\n              onClick = {this.onOpenModal}\n          />\n          <Modal open={open} onClose={this.onCloseModal} center>\n            <div className=\"modal-window__flex-container\">\n              <form action=\"\" className = \"modal-window__form\">\n                <input type=\"text\" className = \"modal-window__form__input\" placeholder=\"Field\" />\n                <input type=\"text\" className = \"modal-window__form__input\" name=\"\" id=\"\" placeholder=\"New Value\" />\n                <button type=\"submit\" className = \"modal-window__form__button\">Submit</button>\n              </form>\n            </div>\n          </Modal>\n        </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport Modal from 'react-responsive-modal';\n\nimport Fetcher from '../../../Fetcher/index';\nimport {FetchConfig} from '../../../Fetcher/config';\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\n\n// Add project\nexport type ProjectState = {\n    title: string,\n    company: string,\n    cost: number,\n    deadline: Date,\n    assigned: string\n}\n\nexport class AddModalWindow extends Component {\n    state = {\n      open: false\n    }\n\n    onOpenModal = () => {\n      this.setState({ open: true });\n    };\n     \n    onCloseModal = () => {\n      this.setState({ open: false });\n    };\n\n    editRequest = (id: string, data: ProjectState) => {\n      new Fetcher().post(`https://${FetchConfig.domain}/api/project/${id}`, 'no_token', data)\n    }     \n    render() {\n      const { open } = this.state;\n      return (\n        <div className = \"modal-window\">\n          <FontAwesomeIcon\n            icon = {faPlus}\n              className = \"table__color_main_success table__icon __close_btn\"\n              onClick = {this.onOpenModal}\n          />\n          <Modal open={open} onClose={this.onCloseModal} center>\n            <div className=\"modal-window__flex-container\">\n              <form action=\"\" className = \"modal-window__form\">\n                <input type=\"text\" className = \"modal-window__form__input\" placeholder=\"Field\" />\n                <input type=\"text\" className = \"modal-window__form__input\" name = \"title\" placeholder=\"New Value\" />\n                <input type=\"text\" className = \"modal-window__form__input\" name = \"company\" placeholder=\"Field\" />\n                <input type=\"text\" className = \"modal-window__form__input\" name = \"cost\" placeholder=\"New Value\" />\n                <input type=\"date\" className = \"modal-window__form__input\" name = \"deadline\" placeholder=\"Field\" />\n                <input type=\"text\" className = \"modal-window__form__input\" name=\"assigned\" placeholder=\"New Value\" />\n                <button type=\"submit\" className = \"modal-window__form__button\">Add Project</button>\n              </form>\n            </div>\n          </Modal>\n        </div>\n    );\n  }\n}","import React, {Component} from 'react';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faTimes, faEllipsisV} from \"@fortawesome/free-solid-svg-icons\";\nimport EditModalButton from './edit_component';\nimport { AddModalWindow } from './add_component';\nimport Fetcher from '../../../Fetcher/index';\nimport {FetchConfig} from '../../../Fetcher/config';\n\ntype HoverState = {\n    hover: boolean,\n    id: string\n}\ntype HoverProps = {\n    id: string\n}\n\nclass ModalMenu extends Component <HoverProps, {}>{\n\n    removeElement = () => {\n        let id:string = this.props.id;\n        new Fetcher().delete(`https:${FetchConfig.domain}/api/projects/${id}`, 'no_token')\n            .then(response => {\n                if(response.status > 199 && response.status < 400){\n                    alert(\"Successfully remove element\");\n                }\n            })\n            .catch(error => {\n                alert(error);\n            })\n    }\n    render(){\n        return (\n            <div>\n                <AddModalWindow/>\n                <EditModalButton/>\n                <div className = \"table__data-center\">\n                    <FontAwesomeIcon\n                        onClick = { this.removeElement }\n                        icon = {faTimes}\n                        className = \"table__color_main_success table__icon table__icon_danger __close_btn\"\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default class HoverMenu extends Component <HoverProps, HoverState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            hover: false,\n            id: this.props.id\n        }\n    }\n    onHover = () => {\n        this.setState({ hover: true })\n    }\n\n    onLeave = () => {\n        this.setState({ hover: false })\n    }\n\n    render() {\n        const {hover, id} = this.state;\n        // \n        return (         \n            <div onMouseLeave = { this.onLeave } >\n                {hover ?\n                    (<ModalMenu id= {id}/>) : (\n                        <FontAwesomeIcon\n                            onMouseEnter = { this.onHover }\n                            icon = {faEllipsisV}\n                            className = \"table__color_main_success table__icon __close_btn\"\n                        />\n                    )\n                }\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\n// import Fetcher from '../../Fetcher/index';\n// import {FetchConfig} from '../../Fetcher/config';\nimport typy from 'typy';\nimport moment from 'moment';\nimport Menu from './modal/modal_menu';\n\nexport interface ServerResponse {\n    data: Array<any>\n}\n\ntype TableProps = {\n    data: Array<any>\n}\n\ntype TableStructure = {\n    title: string,\n    company: string,\n    cost: number,\n    deadline: Date,\n    timeSpent: number,\n    progress: number,\n    status: string,\n    assigned: object,\n    created_at: Date,\n    _id: string,\n    updated_at: Date\n}\n\nexport class Table extends Component <TableProps, ServerResponse> {\n    constructor(props:any){\n        super(props);\n        this.state = {\n            data: this.props.data\n        }\n\n        document.title = \"Projects\"\n    }\n\n    sort(field: string){\n        switch(field){\n            case \"title\":\n                return this.state.data.sort((a:TableStructure, b:TableStructure) => {\n                    return a.title.toLowerCase() < b.title.toLowerCase() ? -1 : a.title.toLowerCase()  ? 1 : 0;\n                });\n                break;\n            case \"value\":\n                return this.state.data.sort((a:TableStructure, b:TableStructure) => {\n                    return a.cost - b.cost\n                });\n            case \"deadline\":\n                return this.state.data.sort((a:TableStructure, b:TableStructure) => {\n                    return a.deadline < b.deadline ? -1 : a.title.toLowerCase()  ? 1 : 0;\n                });\n            case \"time\":\n                return this.state.data.sort((a:TableStructure, b:TableStructure) => {\n                    return a.timeSpent - b.timeSpent\n                });\n            case \"progress\":\n                return this.state.data.sort((a:TableStructure, b:TableStructure) => {\n                    return a.progress - b.progress\n                });\n            case \"status\":\n                return this.state.data.sort((a:TableStructure, b:TableStructure) => {\n                    return a.status.toLowerCase() < b.status.toLowerCase() ? -1 : a.title.toLowerCase()  ? 1 : 0;\n                });\n        }\n    }\n\n    table_field(value:TableStructure, id: number){\n        let row_class:string = \"\";\n        let main_color:string = \"\";\n        let secondary_color:string = \"\";\n\n        if(value.progress === 100){\n            row_class = \"table__row_success\";\n            main_color = \"table__color_main_success\";\n            secondary_color = \"table__color_secondary_success\";\n        }\n        else if (value.progress < 100 && value.progress > 0) {\n            row_class = \"table__row_in-progress\";\n            main_color = \"table__color_main_in-progress\";\n            secondary_color = \"table__color_secondary_in-progess\";\n        }\n        else{\n            row_class = \"table__row\"\n            main_color = \"table__color_main\";\n            secondary_color = \"table__color_secondary\";\n        }\n\n        return (\n            <tr className={row_class} key = { id } id ={ value._id }>\n                <td className=\"table__data\">\n                    <p className = {main_color}>{ value.title }</p>\n                    <p className = {secondary_color}>{ value.company }</p>\n                </td>\n                <td className={main_color + \" table__data\"} >{ value.cost }</td>\n                <td className = {main_color + \" table__data\"}>\n                    <p className = {main_color}>\n                        <span>{ new Date(value.deadline).getDate() } </span>\n                        <span>{ this.humanityMonthName(new Date(value.deadline).getMonth()) } </span>\n                        <span className = {secondary_color}>{ new Date(value.deadline).getFullYear() }</span>\n                    </p>\n                    <p className = {main_color}> {moment(value.updated_at).fromNow(true)} </p>\n                </td>\n                <td className={main_color + \" table__data\"}>{ value.timeSpent } hours</td>\n                <td className={main_color + \" table__data\"}>\n                    <span>{ value.progress }% </span>\n                    {this.generateProgress(value)}\n                </td>\n                <td className={main_color + \" table__data\"}>{ value.status }</td>\n                <td className={main_color + \" table__data table__img_block\"}>\n                    <span className = \"table__img_block table__element\">\n                        <img src=\"https://i.pinimg.com/originals/97/e4/2a/97e42a82fc7911961d3ca55f54d1372c.jpg\" className=\"table__img_block__img\" alt=\"user avatar\"/>\n                    </span>\n                    <span>\n                        {typy(value.assigned, 'name').safeObject}  <br/>\n                        {typy(value.assigned, 'position').safeObject}\n                    </span>\n                </td>\n                <td className = {main_color + \" modal_toggler\"}>\n                    <Menu id = {value._id}/>\n                </td>\n            </tr>\n        )\n    }\n\n    humanityMonthName(month_number:number){\n        let month_name: Array<string> = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n        return month_name.filter((value, index) => {\n            return index === month_number\n        })\n    } \n\n    generateProgress(data:TableStructure){\n        if(data.progress < 100){\n            return (\n                <progress className = \"progress progress_pending\" max = \"100\" value={ data.progress }></progress>\n            )\n        }else{\n            return (\n                <progress className = \"progress progress_success\" max = \"100\" value={ data.progress }></progress>\n            )\n        }\n    }\n\n    render(){\n        return (\n            <table className=\"table\">\n                <thead className=\"table__header\" key = \"thead\">\n                    <tr className = \"table__color_secondary\">\n                        <th className = \"table__header__item\"\n                            onClick = {() => {\n                                this.sort(\"title\");\n                            }}\n                        >Project title</th>\n                        <th className = \"table__header__item\">Value</th>\n                        <th className = \"table__header__item\">Deadline</th>\n                        <th className = \"table__header__item\">Time spent</th>\n                        <th className = \"table__header__item\">Progress</th>\n                        <th className = \"table__header__item\">Status</th>\n                        <th className = \"table__header__item\">Assigned to</th>\n                    </tr>\n                </thead>\n                <tbody className=\"table__body\" key = \"tbody\">\n                    {\n                        this.state.data.map((value: TableStructure, index: number) => \n                            { return this.table_field(value, index)}\n                        )\n                    }\n                </tbody>\n            </table>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Fetcher from '../../Fetcher';\nimport Action from '../../redux/actions';\nimport Preloader from '../preloader';\nimport { ProjectsHeader } from '../headers/headers';\nimport { Table } from './table';\n\ntype ProjectState = {\n    projectsAmount: number,\n    table: Array<any>\n}\n\nexport default class ProjectComponent extends Component <{}, ProjectState> {\n    constructor(props: any){\n        super(props);\n        this.get_projects_data();\n        this.state = {\n            projectsAmount: 0,\n            table: [],\n        }\n    }\n\n    async get_projects_data(){\n        const response: any = await new Fetcher().get(`api/projects`, 'access')\n            .then(response => { return response })\n\n        if(response.status > 199 && response.status < 400){\n            Object.keys(response.data).map((key) => response.data[key]);\n            this.setState({ \n                projectsAmount: response.data.length,\n                table: response.data\n            })\n            new Action().add({\n                projectsAmount: response.data.length\n            })\n        }\n        else{\n            alert(\"Error loading data from server\")\n        }\n    }\n\n    projectsComponent(){\n        return [\n            <ProjectsHeader amount = {this.state.projectsAmount}/>,\n            <section className=\"main_content__section\">\n                <Table data = { this.state.table }/>\n            </section>\n        ]\n    }\n\n    render(){\n        if(this.state.table.length > 1){\n            return [\n                <ProjectsHeader amount = {this.state.projectsAmount}/>,\n                <section className=\"main_content__section\">\n                    <Table data = { this.state.table }/>\n                </section>\n            ]\n        }else{\n            return <Preloader/>\n        }\n    }\n}","import React, { Component } from 'react';\nimport { AllThreadStructure } from '../types';\nimport Fetcher from '../../../Fetcher';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faUserCircle} from \"@fortawesome/free-solid-svg-icons\";\nimport typy from 'typy';\nimport moment from 'moment';\n\ntype ThreadProps = {\n    thread: Array<any>\n}\n\ntype UsersListState = {\n    users_amount: number,\n    users: Array<any>,\n\n    thread: Array<any>,\n    thread_amount: number\n}\n\nexport default class UsersList extends Component <ThreadProps, UsersListState> {\n    constructor(props:any){\n        super(props)\n        \n        this.get_threads_messages();\n        this.get_users_server_data();\n        this.state = {\n            users: [],\n            users_amount: 0,\n\n            thread: [],\n            thread_amount: 0\n        }\n    }\n\n    async get_users_server_data(){\n        const users_response: any = await new Fetcher().get(`api/users/all`, 'access')\n        .then(response => { return response })\n        if(users_response.status > 199 && users_response.status < 400){\n            this.setState({\n                users: users_response.data,\n                users_amount: users_response.data.length\n            })\n        }\n    }\n\n    async get_threads_messages(){\n        const thread_messages_response:any = await new Fetcher().get('api/threads/messages/5e1a1c818ec2f49ab3e59ab2', 'access')\n            .then(response => { return response; })\n            if(thread_messages_response.status > 199 && thread_messages_response.status < 400){\n                this.setState({\n                    thread: thread_messages_response.data,\n                    thread_amount: thread_messages_response.data.length\n                })\n            }\n    }\n\n    user_field(value:AllThreadStructure){\n        return (\n            <li key = {value._id} className = \"main_content__item__wrapper main_content__list_item main_content__list__border\">\n                <article className = \"main_content__item__wrapper\">\n                    <div className = \"main_content__flex_container main_content__flex_container_justify-content\">\n                        <div className=\"main_contnet__wrapper\">\n                            <span className = \"main_content__item__photo\">\n                                <FontAwesomeIcon\n                                    icon = { faUserCircle }\n                                    size = \"2x\"\n                                    className = \"main_content__item__img_tag\"\n                                />\n                            </span>\n                            <span className = \"main_content__item__header\">{ typy(value, \"user.name\").safeObject }</span>\n                        </div>\n                        <div className=\"main_contnet__wrapper\">\n                            <span className = \"main_content__item__subheader color_blue text_base\">{ moment(value.created_at).fromNow() }</span>\n                        </div>\n                    </div>\n                    <div className=\"main_content__item__flex_block main_content__indent\">\n                        <span className=\"main_content__item__base text_base\">{value.body}</span>\n                    </div>\n                </article>\n            </li>\n        )\n    }\n\n    render(){\n        if(this.state.users.length){\n            return (\n                <article className = \"main_content__item box_shadow\">\n                    <ul className = \"main_content__list__item\">\n                        { \n                            this.state.thread.map((value: AllThreadStructure) => {\n                                return this.user_field(value)\n                            }) \n                        }\n                    </ul>\n                </article>\n            )\n        }else{\n            return (\n                <div></div>\n            )\n        }\n    }\n}\n\n","import React, { Component } from 'react';\nimport Fetcher from '../../../Fetcher';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleDoubleRight } from '@fortawesome/free-solid-svg-icons';\n\ntype SendMessageState = {\n    message: string | File,\n    _id: string\n}\n\nexport default class SendMessage extends Component <{}, SendMessageState> {\n    \n    componentDidMount(){\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    getId(){\n        if(localStorage.getItem(\"user_id\")){\n            return localStorage.getItem(\"user_id\");\n        }\n    }\n\n\n    handleChange(event: { target: HTMLInputElement }){\n        switch(event.target.name){\n            case \"message\":\n                this.setState({\n                    message: event.target.value\n                })\n                break;\n        }\n    }\n\n    handleSubmit(event: React.FormEvent){\n        event.preventDefault();\n        let { message }  = this.state;\n\n        new Fetcher().post('api/threads/messages', 'access', {\n            thread: {\n                _id: this.getId()\n            },\n            message: {\n                body: message\n            }\n        })\n    }\n\n    render(){\n        return(\n            <article className=\"main_content__input__wrapper\">\n                <input onChange = { this.handleChange } type=\"text\" name = \"message\" className=\"main_content__input_tag\"/>\n                <span className = \"main_content__input__icon\">\n                    <FontAwesomeIcon\n                        icon = { faAngleDoubleRight }\n                        size = \"lg\"\n                        onClick = { this.handleSubmit }\n                    />\n                </span>\n            </article>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport Fetcher from '../../../Fetcher';\n\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faUserCircle} from \"@fortawesome/free-solid-svg-icons\";\nimport moment from 'moment';\nimport SendMessageComponent from './input_component';\n\nimport { AllThreadStructure } from '../types';\n\ntype MessagesState = {\n    data: Array<AllThreadStructure>\n}\n\nexport default class Messages extends Component <{}, MessagesState> {\n\n    constructor(props:any){\n        super(props);\n\n        this.state = {\n            data: []\n        }\n\n        this.get_server_data();\n    }\n\n    async get_server_data(){\n        const responce:any = await new Fetcher().get('api/threads/messages/5e1a1c818ec2f49ab3e59ab2?sort=desc', 'access')\n            .then(response => { return response });\n        if(responce.status > 199 && responce.status < 400){\n            this.setState({\n                data: responce.data\n            })\n        }\n    }\n\n    field(value: AllThreadStructure, index: number, array:Array<AllThreadStructure>){\n        let direction_class:string = \"\";\n        \n        if(index < array.length - 1){\n            if(array[index]._id === array[index + 1]._id){\n                direction_class = \"_left\"\n            }\n        }\n        else direction_class = \"_right\";\n        \n        return(\n            <li key = { value._id } className = { \"main_content__list__item\" + direction_class + \"box_shadow-indent\" }>\n                <article className = \"main_content__item__wrapper\">\n                    <div className = { \"main_content__flex_container\" + direction_class + \" main_content__flex_container box_shadow-rounded main_content__list__item-width_fit\" }>\n                        <div className=\"main_contnet__wrapper\">\n                            <span className = \"main_content__item__photo\">\n                                <FontAwesomeIcon\n                                    icon = { faUserCircle }\n                                    size = \"2x\"\n                                    className = \"main_content__item__img_tag\"\n                                />\n                            </span>\n                        </div>\n                        <div className=\"main_contnet__wrapper\">\n                            <span className = \"main_content__item__subheader color_base\">{ value.body }</span>\n                        </div>\n                    </div>\n                    <div className = { \"main_content__list__item\" + direction_class + \" main_content__item__flex_block\"}>\n                        <span className=\"main_content__item__base text_small color_secondary\">{ moment(value.created_at).fromNow() }</span>\n                    </div>\n                </article>\n            </li>\n        )\n    }\n\n    render(){\n        if(this.state.data.length){\n            return (\n                <article className = \"main_content__item\">\n                    <ul className = \"main_content__list__item\">\n                        { this.state.data.map((value, index:number, array) => {\n                            return this.field(value, index, array)\n                        }) }\n                    </ul>\n                    <SendMessageComponent/>\n                </article>\n            )\n        }else{\n            return (\n                <div></div>\n            )\n        }\n    }\n}","import React, { Component } from 'react';\nimport Fetcher from '../../../Fetcher';\nimport { UsersStructure } from '../types';\n\ntype CurrentUserState = {\n    data: UsersStructure\n}\n\nexport default class CurrentUser extends Component <{}, CurrentUserState> {\n\n    constructor(props: UsersStructure){\n        super(props);\n\n        this.state = {\n            data: {\n                _id: \"\",\n                name: \"\",\n                email: \"\",\n                position: \"\",\n                phone: \"\",\n                organization: \"\",\n                address: \"\",\n                description: \"\"\n            }\n        }\n        this.get_current_user();\n    }\n\n    async get_current_user(){\n        const current_user_response: any = await new Fetcher().get(`api/users/${localStorage.getItem(\"user_id\")}`, 'access')\n        .then(response => { return response })\n        if(current_user_response.status > 199 && current_user_response.status < 400){\n            this.setState({\n                data: current_user_response.data\n            })\n        }\n    }\n\n    generateArticle(value:UsersStructure){\n        value.description = \"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Atque neque quae laudantium amet dolores repellat libero perspiciatis dolor optio doloribus! Error molestias eos sapiente rem exercitationem ad ipsum fugiat perferendis.\";\n        return (\n            <div className = \"main_content__item\">\n                <div className=\"main_content__item__wrapper\">\n                    <div className=\"main_content__item__photo\">\n                        <img src=\"https://s.yimg.com/ny/api/res/1.2/wtzeNGYJlWn1YCuOXKy3DQ--~A/YXBwaWQ9aGlnaGxhbmRlcjtzbT0xO3c9ODAw/http://media.zenfs.com/en/homerun/feed_manager_auto_publish_494/69212554e5b1b94435cb5d1f9f0d2fbd\" alt=\"user logo\" className=\"main_content__item__img_tag-large\"/>\n                    </div>\n                    <div className=\"main_content__item__wrapper_center\">\n                        <p className=\"main_content__item__header\">{ value.name }</p>\n                        <p className=\"main_content__item__subheader\">{ value.position }</p>\n                        <p className = \"main_content__item__base color_secondary\">{ value.description }</p>\n                    </div>\n                    <div className=\"main_content__item__wrapper_center\">\n                        <div>\n                            <p className=\"main_content__item__label\">Email</p>\n                            <p className=\"main_content__item__base\">{ value.email }</p>\n                        </div>\n                        <div>\n                            <p className=\"main_content__item__label\">Phone</p>\n                            <p className=\"main_content__item__base\">{ value.phone }</p>\n                        </div>\n                        <div>\n                            <p className=\"main_content__item__label\">Address</p>\n                            <p className=\"main_content__item__base\">{ value.address }</p>\n                        </div>\n                        <div>\n                            <p className=\"main_content__item__label\">Organization</p>\n                            <p className=\"main_content__item__base\">{ value.organization }</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    render(){\n        if(this.state.data._id){\n            return (\n                this.generateArticle(this.state.data)\n            )\n        }else{\n            return (\n                <div></div>\n            )\n        }\n    }\n}","import React, { Component } from 'react';\nimport { MessagerState } from './types';\nimport { MessagesHeader } from '../headers/headers';\n\nimport Users from './users/users_list';\nimport Messages from './messages/messages';\nimport CurrentUser from './current_user/current_user';\n\nimport Fetcher from '../../Fetcher';\nimport Preloader from '../preloader';\n\nexport default class Messager extends Component <{}, MessagerState> {\n    constructor(props: any){\n        super(props);\n        this.get_thread_server_data();\n        this.get_current_user();\n\n        this.state = {\n            thread: [],\n            thread_amount: 0,\n\n            current_user: {\n                name: \"\",\n                _id: \"\",\n                email: \"\"\n            }\n        }\n\n        document.title = \"Messages\";\n    }\n\n    async get_thread_server_data(){\n        const thread_response: any = await new Fetcher().get(`api/threads?sort=desc`, 'access')\n            .then(response => { return response })\n        if(thread_response.status > 199 && thread_response.status < 400){\n            this.setState({\n                thread: thread_response.data,\n                thread_amount: thread_response.data.length\n            })\n        }\n    }\n\n    async get_current_user(){\n        const current_user_response: any = await new Fetcher().get(`api/users`, 'access')\n        .then(response => { return response })\n        if(current_user_response.status > 199 && current_user_response.status < 400){\n            this.setState({\n                current_user: current_user_response.data\n            })\n        }\n    }\n\n    messagerComponent(thread: Array<any>){\n        return [\n            <MessagesHeader inbox = {thread.length}/>,\n            <section className = \"main_content__section\">\n                <Users thread = {this.state.thread}/>\n                <Messages/>\n                <CurrentUser/>\n            </section>\n        ]\n    }\n\n    render(){\n        let { thread } = this.state;\n        if(this.state.thread.length){\n            return [\n                <MessagesHeader inbox = {thread.length}/>,\n                <section className = \"main_content__section\">\n                    <Users thread = {this.state.thread}/>\n                    <Messages/>\n                    <CurrentUser/>\n                </section>\n            ]\n        }else{\n            return <Preloader/>\n        }\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.scss';\nimport './App.scss';\nimport * as serviceWorker from './serviceWorker';\n// Components\nimport Login from './components/auth/Login';\nimport SignUp from './components/auth/SignUp';\nimport Reset from './components/auth/Reset';\nimport Dashboard from './components/Dashboard';\n// Redux\nimport { Provider } from 'react-redux'\nimport store from './components/redux/store/index'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nReactDOM.render(\n    <Provider key = \"navigation_store\" store = {store}>\n        <BrowserRouter key = \"navigation\">\n            <Switch >\n                <Route exact path = \"/\" component = { Login } key = \"login\" />\n                <Route path = \"/reset\" component = { Reset } key = \"reset password\" />\n                <Route path = \"/signup\" component = { SignUp } key = \"signup\" />\n                <Route path = \"/dashboard\" component = { Dashboard } key = \"dashboard\" />\n            </Switch>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}